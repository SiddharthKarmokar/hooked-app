name: Deploy to ECS

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  ECS_CLUSTER_NAME: ${{ secrets.ECS_CLUSTER_NAME }}
  ECS_SERVICE_NAME: ${{ secrets.ECS_SERVICE_NAME }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install Utilities
      run: |
        sudo apt-get update
        sudo apt-get install -y jq unzip
    
    - name: Install dependencies
      working-directory: backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest
  
    - name: Set env vars from secrets
      run: |
        echo "MONGO_DB_URI=${{ secrets.MONGO_DB_URI }}" >> $GITHUB_ENV
        echo "PPLX_API_KEY=${{ secrets.PPLX_API_KEY }}" >> $GITHUB_ENV
        echo "JWT_HASH_KEY=${{ secrets.JWT_HASH_KEY }}" >> $GITHUB_ENV
        echo "SENDGRID_API_KEY=${{ secrets.SENDGRID_API_KEY }}" >> $GITHUB_ENV
        echo "ENABLE_LOGGING=true" >> $GITHUB_ENV

    - name: Run Pytest
      working-directory: backend
      run: |
        pytest

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push Docker image
      working-directory: backend
      run: |
        IMAGE_TAG=latest
        docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REPOSITORY:$IMAGE_TAG

    - name: Fill in the new image ID in the task definition
      working-directory: backend
      run: |
        IMAGE_URI="${ECR_REPOSITORY}:latest"
        sed "s|<IMAGE_URI>|$IMAGE_URI|g" ecs-task-def.json > new-task-def.json
      
    - name: Fill in task definition with secrets
      working-directory: backend
      shell: bash
      run: |
        sed -i "s|MONGO_DB_URI_PLACEHOLDER|${{ secrets.MONGO_DB_URI }}|g" new-task-def.json
        echo "MONGO_DB_URI set:"
        grep MONGO_DB_URI new-task-def.json

        sed -i "s|JWT_HASH_KEY_PLACEHOLDER|${{ secrets.JWT_HASH_KEY }}|g" new-task-def.json
        echo "JWT_HASH_KEY set:"
        grep JWT_HASH_KEY new-task-def.json

        sed -i "s|SENDGRID_API_KEY_PLACEHOLDER|${{ secrets.SENDGRID_API_KEY }}|g" new-task-def.json
        echo "SENDGRID_API_KEY set:"
        grep SENDGRID_API_KEY new-task-def.json

        sed -i "s|PPLX_API_KEY_PLACEHOLDER|${{ secrets.PPLX_API_KEY }}|g" new-task-def.json
        echo "PPLX_API_KEY set:"
        grep PPLX_API_KEY new-task-def.json


    - name: Register new task definition
      working-directory: backend
      id: register-task-def
      run: |
        TASK_DEF_ARN=$(aws ecs register-task-definition \
          --cli-input-json file://new-task-def.json \
          --query 'taskDefinition.taskDefinitionArn' \
          --output text)
        echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV

    - name: Deploy ECS service
      run: |
        aws ecs update-service \
          --cluster $ECS_CLUSTER_NAME \
          --service $ECS_SERVICE_NAME \
          --task-definition ${{ env.TASK_DEF_ARN }}
