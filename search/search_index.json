{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83c\udfa3 HookED \u2013 Learning That Slaps","text":"<p>A gamified microlearning app for neurodivergent minds and curiosity-driven learners\u2014powered by the Perplexity Sonar API.</p> <p>In One Line</p> <p>HookED turns learning into a real-time, scrollable experience\u2014powered by AI, structured by story, and gamified for curiosity.</p>"},{"location":"#inspiration","title":"\ud83c\udf1f Inspiration","text":"<p>\"What if learning felt like scrolling TikTok\u2014but actually made you smarter?\"</p> <p>HookED was born from frustration with traditional learning and a desire to create something that speaks to how people actually absorb information\u2014especially those with ADHD, burnout, or short attention spans.</p> <p>We saw the power of stories, analogies, and visual reinforcement\u2014and paired that with cutting-edge AI to build a new way to learn.</p>"},{"location":"#what-it-does","title":"\ud83d\ude80 What It Does","text":"<p>HookED is a mobile-first app that delivers:</p> <ul> <li>\ud83d\udccc 60-word hooks powered by the Perplexity Sonar API</li> <li>\ud83d\udcda Real-time sources and citations</li> <li>\ud83e\udde0 Instant quizzes to reinforce key ideas</li> <li>\ud83e\udded Optional \u201cHook Quests\u201d for deeper exploration</li> </ul> <p>Along the way, users collect XP, badges, and streaks\u2014making learning feel like leveling up in a game.</p>"},{"location":"#architecture-overview","title":"\ud83c\udfd7\ufe0f Architecture Overview","text":"Component Technology Used Purpose Mobile App React Native Custom UI for onboarding, search, quizzes, Hook Feed, and quests Backend Python + FastAPI Routing, XP logic, profile management, and API calls Database MongoDB Atlas Stores users, history, XP, quest states, and badge data AI Engine Perplexity Sonar Pro API Generates hooks, analogies, citations, and quiz prompts Visual Layer LangChain + Gemini 2.0 Flash Creates visuals to reinforce learning Hosting AWS Full-stack deployment"},{"location":"#ai-integration-details","title":"\ud83e\udd16 AI Integration Details","text":"<p>Perplexity Sonar API: Real-Time Relevance</p> <ul> <li>Trained on live web data</li> <li>Handles informal, meme-like prompts</li> <li>Outputs structured developer-friendly JSON</li> </ul> <p>Integration Flow:</p> <ol> <li>\ud83e\uddf1 Prompt templating via LangChain  </li> <li>\ud83e\uddfe Output schema for hook, analogy, quiz, riddle  </li> <li>\ud83d\udd0d Fallback JSON parser (<code>extract_valid_json</code>)  </li> <li>\ud83e\uddf5 Used to generate Feed Cards and HookQuests</li> </ol> <p>See more in Feed and Trending.</p>"},{"location":"#documentation-sections","title":"\ud83d\udcc2 Documentation Sections","text":"<p>Navigate through each key component of the system:</p> <ul> <li>\ud83d\uddbc Frontend UI \u2013 Built with React Native for a buttery-smooth mobile experience.</li> <li>\ud83e\udde0 Backend Logic \u2013 FastAPI-based service for XP, hooks, and user flow.</li> <li>\ud83d\udcf0 Feed Generation \u2013 How we generate bite-sized learning cards from Sonar responses.</li> <li>\ud83d\udcca Trending Engine \u2013 How popularity scores drive the global trending page.</li> </ul>"},{"location":"#engineering-challenges","title":"\ud83e\udde9 Engineering Challenges","text":"<p>Not Everything Was Plug-and-Play</p> <ul> <li>Hooks had to be carefully trimmed and cleaned to stay below 60 words.</li> <li>Quizzes needed post-processing and logic to balance difficulty.</li> <li>UI needed dopamine without distraction\u2014especially for neurodivergent users.</li> <li>Chain-of-thought logic was simulated via custom thread-like design.</li> </ul>"},{"location":"#accomplishments","title":"\ud83c\udfc6 Accomplishments","text":"<ul> <li>\u2705 AI-powered, real-time educational feed  </li> <li>\ud83c\udfaf Designed for ADHD, anxiety, and cognitive load  </li> <li>\ud83e\udded Story-driven \u201cHookQuests\u201d  </li> <li>\ud83d\udcf1 TikTok-style UI for knowledge  </li> <li>\ud83e\udde0 Turned raw LLM output into structured learning moments  </li> </ul>"},{"location":"#lessons-learned","title":"\ud83d\udcda Lessons Learned","text":"<p>LLMs are powerful\u2014but unpredictable.</p> <p>Prompt engineering is a full-time job. We learned to debug and mold outputs for precision and emotional tone.</p> <ul> <li>Designing for neurodivergent users means optimizing for safety and clarity.</li> <li>Gamification must be earned, not forced.</li> <li>React Native + FastAPI = fast iteration.</li> <li>AI text \u2192 structured logic = creative problem solving.</li> </ul>"},{"location":"#whats-next","title":"\ud83d\udd2e What's Next","text":"<ul> <li>\ud83e\udde0 Hook History &amp; Recommendations</li> <li>\ud83d\udc65 Social Learning &amp; Study Squads</li> <li>\ud83e\uddea Contextual Quiz Engine</li> <li>\ud83c\udfad Mood-Based Hooking</li> <li>\ud83c\udf0d Offline Mode + Multilingual Support</li> </ul>"},{"location":"#demo","title":"\ud83c\udfa5 Demo","text":"<p>\ud83d\udcfa Watch Demo (3 mins)</p>"},{"location":"#repository","title":"\ud83d\udd12 Repository","text":"<p>GitHub Repo</p> <p>API link</p> <p>Shared With: - james.liounis@perplexity.ai - sathvik@perplexity.ai - devrel@perplexity.ai - testing@devpost.com</p>"},{"location":"#submission-info","title":"\ud83c\udff7 Submission Info","text":"<p>Category: Education, Health, Fun and Creative Bonus: Deep Research Team: Aishwarya Jakka, Rahul Rao, Siddarth Karmokar Main Tool: Perplexity Sonar API</p>"},{"location":"#contact","title":"\ud83d\udcec Contact","text":"<p>Created by:</p> <ul> <li>Siddarth Karmokar - siddkarmokar@gmail.com (backend)</li> <li>Aishwarya Jakka \u2013 aishwaryajakka@gmail.com (ui, ux and management) </li> <li>Rahul Rao  - rahulyup@gmail.com (frontend)</li> </ul>"},{"location":"#license","title":"\ud83d\udcdc License","text":"<p>MIT License \u2014 Open for educational, non-commercial, and community use.</p>"},{"location":"backend/","title":"HookED Backend Documentation","text":"<p>Status: Active Development Stack: FastAPI \u00b7 Perplexity AI (PPLX) \u00b7 MongoDB \u00b7 ECS \u00b7 Docker \u00b7 S3</p>"},{"location":"backend/#project-structure-overview","title":"Project Structure Overview","text":"<pre><code>backend/\n\u251c\u2500\u2500 logs/                  # Logging output and debug information\n\u251c\u2500\u2500 schema/                # Pydantic schemas or output formats for model validation\n\u251c\u2500\u2500 src/                   # Main application source code\n\u251c\u2500\u2500 static/                # Static assets, if any (e.g., images, js files)\n\u251c\u2500\u2500 tests/                 # Unit and integration tests\n\u251c\u2500\u2500 main.py                # FastAPI entrypoint\n\u251c\u2500\u2500 Dockerfile             # Docker config for containerizing backend\n\u251c\u2500\u2500 ecs-task-def.json      # AWS ECS task definition for deployment\n\u251c\u2500\u2500 requirements.txt       # Python dependencies\n\u251c\u2500\u2500 .env                   # Environment variables\n\u251c\u2500\u2500 pytest.ini             # Pytest configuration\n\u251c\u2500\u2500 .gitignore             # Git exclusions\n</code></pre>"},{"location":"backend/#aws-s3-integration","title":"AWS S3 Integration","text":"<p>Image uploads (e.g., for memes or generated visuals) are now handled via AWS S3.</p>"},{"location":"backend/#current-behavior","title":"Current Behavior","text":"<ul> <li>Generated images are uploaded to the <code>my-hooked-images</code> S3 bucket using <code>boto3</code>.</li> <li>Each image is stored using a UUID-based key.</li> </ul>"},{"location":"backend/#permissions-requirement","title":"Permissions Requirement","text":"<p>Make sure the IAM role or user (<code>hooked-admin</code>) has the following policy:</p> <pre><code>{\n  \"Effect\": \"Allow\",\n  \"Action\": [\n    \"s3:PutObject\",\n    \"s3:GetObject\"\n  ],\n  \"Resource\": \"arn:aws:s3:::my-hooked-images/*\"\n}\n</code></pre> <p>Troubleshooting: If you see <code>AccessDenied</code> for <code>s3:PutObject</code>, ensure:</p> <ul> <li>The IAM user/role is correctly attached to your ECS task or Lambda.</li> <li>The policy above is included.</li> <li>The S3 bucket does not have a restrictive bucket policy that overrides it.</li> </ul>"},{"location":"backend/#language-model-integration-perplexity-ai-pplx","title":"Language Model Integration: Perplexity AI (PPLX)","text":"<p>This project uses Perplexity\u2019s conversational APIs to power AI interactions.</p>"},{"location":"backend/#pplx-interface","title":"<code>PPLX</code> Interface","text":"<pre><code>class PPLX:\n    def __init__(self, model_name=MODEL_NAME, temperature:int=TEMPERATURE):\n        self.chat = ChatPerplexity(\n            temperature=temperature,\n            model=model_name\n        )\n\n    def set_template(self, system_msg:str):\n        self.template = ChatPromptTemplate.from_messages([\n            ('system', system_msg),\n            ('human', '{input}')\n        ])\n\n    def get_prompt(self, input:str, schema:dict):\n        if self.chat.model == 'sonar-pro':\n            model = self.chat.with_structured_output(schema=schema)\n            prompt = self.template.invoke({\"input\": input, \"format_instructions\": None})  \n            response = model.invoke(prompt)\n            print(\"\\n\\n\",response,\"\\n\\n\")\n            return response\n\n        sonar_pro_chat = ChatPerplexity(\n            temperature=0,\n            model=\"sonar-pro\"\n        ).with_structured_output(schema=schema)\n        prompt = self.template.invoke({\"input\": input})\n        response = self.chat.invoke(prompt)\n        print(\"\\n\\n\",response,\"\\n\\n\")\n        prompt_for_sonar = extract_valid_json(response.content)\n        result = sonar_pro_chat.invoke(prompt_for_sonar)\n        return result\n</code></pre>"},{"location":"backend/#json-post-processing-logic","title":"JSON Post-Processing Logic","text":"<p>To handle parsing issues with structured output from models like <code>sonar-reasoning</code>, <code>sonar-reasoning-pro</code>, and <code>deep-research</code>, the following helper is used:</p>"},{"location":"backend/#extract_valid_json","title":"<code>extract_valid_json</code>","text":"<pre><code>def extract_valid_json(content: Dict[str, Any]) -&gt; Dict[str, Any]:\n    marker = \"&lt;/think&gt;\"\n    idx = content.rfind(marker)\n\n    if idx == -1:\n        try:\n            return json.loads(content)\n        except json.JSONDecodeError as e:\n            raise ValueError(\"No &lt;/think&gt; marker found and content is not valid JSON\") from e\n\n    json_str = content[idx + len(marker):].strip()\n\n    if json_str.startswith(\"```json\"):\n        json_str = json_str[len(\"```json\"):].strip()\n    if json_str.startswith(\"```\"):\n        json_str = json_str[3:].strip()\n    if json_str.endswith(\"```\"):\n        json_str = json_str[:-3].strip()\n\n    try:\n        parsed_json = json.loads(json_str)\n        return parsed_json\n    except json.JSONDecodeError as e:\n        raise ValueError(\"Failed to parse valid JSON from response content\") from e\n</code></pre> <p>Note: This prevents runtime crashes due to markdown artifacts from LLM output.</p>"},{"location":"backend/#configuration","title":"Configuration","text":"<p>Ensure the following are defined in <code>.env</code>:</p> <pre><code>MODEL_NAME=sonar-reasoning\nTEMPERATURE=0.7\nS3_BUCKET_NAME=my-hooked-images\nAWS_ACCESS_KEY_ID=...\nAWS_SECRET_ACCESS_KEY=...\nAWS_REGION=...\n</code></pre>"},{"location":"backend/#deployment","title":"Deployment","text":"<p>This backend is containerized using Docker and deployed via ECS.</p>"},{"location":"backend/#dockerfile","title":"Dockerfile","text":"<pre><code>FROM python:3.10-slim\nWORKDIR /app\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\nCOPY . . \nCMD [\"python\", \"main.py\"]\n</code></pre>"},{"location":"backend/#ecs-task-definition","title":"ECS Task Definition","text":"<p>File: <code>ecs-task-def.json</code> Defines container image, memory, environment vars, and execution role.</p>"},{"location":"backend/#testing","title":"Testing","text":"<p>Run tests using:</p> <pre><code>pytest tests/\n</code></pre> <p>Or with coverage:</p> <pre><code>pytest --cov=src tests/\n</code></pre>"},{"location":"backend/#summary","title":"Summary","text":"<ul> <li>\u2705 Uses Perplexity's <code>ChatPerplexity</code> for LLM integration</li> <li>\u2705 Graceful fallback and post-processing with <code>&lt;/think&gt;</code>-based JSON recovery</li> <li>\u2705 Flexible support for multiple model types (<code>sonar-*</code>, <code>deep-research</code>)</li> <li>\u2705 Fully Dockerized and ECS-ready deployment</li> <li>\u2705 \ud83c\udd95 Integrated S3 upload support for image assets with IAM policy checks</li> </ul> <p>\ud83e\udde0 Think first. Then query smart. \u2014 HOOKED Backend Philosophy</p>"},{"location":"feed/","title":"Feed Reranking Module","text":"<p>This module implements Multifactor Sequential Reranking with Perception-Aware Diversification (MPAD) \u2014 a hybrid recommendation engine that combines interest modeling, recency/popularity/exploration reranking, and MMR-based diversification.</p> <p>Note</p> <p>This implementation makes specific simplifications and modifications to the original approach proposed in MPAD: Multi-factor Sequential Re-ranking with Perception-Aware Diversification. In particular, we omit the bi-sequential DPP and the perception-aware similarity kernel described in the original model, favoring a more lightweight and interpretable pipeline.</p>"},{"location":"feed/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Overview</li> <li>Key Differences from the Original Paper</li> <li>Stage 1: Interest Vector Computation</li> <li>Stage 2: Hook Scoring</li> <li>Stage 3: Diversification via MMR</li> <li> Feed Generation Pipeline</li> <li>Constants</li> </ul>"},{"location":"feed/#overview","title":"Overview","text":"<p>The system has three major stages:</p> <ol> <li>User Interest Vector Construction</li> <li>Hook Scoring with Popularity, Recency, and Exploration Adjustments</li> <li>Diversified Feed Generation via Maximal Marginal Relevance (MMR)</li> </ol>"},{"location":"feed/#key-differences-from-the-original-paper","title":"Key Differences from the Original Paper","text":"<p>This implementation intentionally deviates from the original MPAD model for performance and simplicity:</p> Collapsible callout <p>Bi-Sequential Determinantal Point Process (DPP): Removed in favor of a simpler MMR-based reranking for diversity, improving runtime efficiency and easing tuning.</p> Collapsible callout <p>Perception-Aware Kernel for Similarity: Replaced with a Jaccard similarity on hook tags, allowing interpretable and tag-based diversity computation without complex embedding comparisons.</p> <p>These changes maintain the core idea of balancing personalization with diversity and exploration, while enabling easier deployment and scaling.</p>"},{"location":"feed/#stage-1-interest-vector-computation","title":"Stage 1: Interest Vector Computation","text":""},{"location":"feed/#compute_interest_scorehook-interaction","title":"<code>compute_interest_score(hook, interaction)</code>","text":""},{"location":"feed/#formula","title":"Formula:","text":"<ul> <li> : weight for action (click, like, etc.) from <code>INTERACTION_WEIGHTS</code> </li> <li> : interaction duration  </li> <li> : weight for duration (from <code>INTERACTION_WEIGHTS['duration']</code>)  </li> <li> : decay rate constant (<code>DECAY_LAMBDA</code>)  </li> <li> : days since hook creation  </li> </ul> <pre><code>score = INTERACTION_WEIGHTS[action] + duration * INTERACTION_WEIGHTS[\"duration\"]\nscore *= math.exp(-DECAY_LAMBDA * days_ago)\n</code></pre>"},{"location":"feed/#decay-rationale","title":"Decay Rationale:","text":"<p>Older content becomes less relevant over time using an exponential decay.</p>"},{"location":"feed/#enrich_with_explicit_tagsinterest_vector-explicit_tags-implicit_tags","title":"<code>enrich_with_explicit_tags(interest_vector, explicit_tags, implicit_tags)</code>","text":"<ul> <li>Boosts interest in explicitly and implicitly tagged categories.  </li> <li>Boost values:  </li> <li>Explicit tag: <code>+5.0</code> </li> <li>Implicit tag: <code>+2.5</code> (half)  </li> </ul>"},{"location":"feed/#for-tag-in-explicit_tags-interest_vectortag-50-for-tag-in-implicit_tags-interest_vectortag-25","title":"<pre><code>for tag in explicit_tags:\n    interest_vector[tag] += 5.0\nfor tag in implicit_tags:\n    interest_vector[tag] += 2.5\n</code></pre>","text":""},{"location":"feed/#stage-2-hook-scoring","title":"Stage 2: Hook Scoring","text":""},{"location":"feed/#compute_reranked_scorehook-base_score-max_views","title":"<code>compute_reranked_score(hook, base_score, max_views)</code>","text":""},{"location":"feed/#formula_1","title":"Formula:","text":"<p>Where: - Base score = dot product of interest vector and hook tags - Recency =  - Popularity = normalized view count - Exploration = random factor in <code>[0.01, 0.1]</code> - Weights  from the <code>WEIGHTS</code> dictionary  </p> <pre><code>score = (\n    WEIGHTS[\"base_score\"] * base_score +\n    WEIGHTS[\"recency\"] * recency_score +\n    WEIGHTS[\"popularity\"] * popularity_score +\n    WEIGHTS[\"exploration_bonus\"] * exploration_bonus\n)\n</code></pre>"},{"location":"feed/#purpose","title":"Purpose:","text":"<p>Balances personal relevance with: - Recency - Popularity - Exploration encouragement</p>"},{"location":"feed/#stage-3-diversification-via-mmr","title":"Stage 3: Diversification via MMR","text":""},{"location":"feed/#apply_mmrscored_hooks-n-lambda_param","title":"<code>apply_mmr(scored_hooks, N, lambda_param)</code>","text":""},{"location":"feed/#mmr-formula","title":"MMR Formula:","text":"<ul> <li> : already selected hooks  </li> <li>Similarity = Jaccard Similarity on tags:</li> </ul> <pre><code>mmr_score = lambda_param * rel_score - (1 - lambda_param) * max_sim\n\ndef jaccard(tags1, tags2):\n    set1, set2 = set(tags1), set(tags2)\n    return len(set1 &amp; set2) / len(set1 | set2)\n</code></pre>"},{"location":"feed/#diversification-tradeoff","title":"Diversification Tradeoff:","text":"<ul> <li> : pure relevance  </li> <li> : pure diversity  </li> <li> : hybrid</li> </ul>"},{"location":"feed/#feed-generation-pipeline","title":"Feed Generation Pipeline","text":""},{"location":"feed/#update_profile","title":"<code>update_profile()</code>","text":"<ul> <li>Iterates all users and logs  </li> <li>Computes updated interest vectors  </li> <li>Stores them in the <code>profile_collection</code></li> </ul>"},{"location":"feed/#get_candidate_hooksuser_interest_vector-n-lambda_param","title":"<code>get_candidate_hooks(user_interest_vector, N, lambda_param)</code>","text":"<ul> <li>Collects all hooks  </li> <li>Reranks each with <code>compute_reranked_score</code> </li> <li>Sorts and selects top-K candidates (based on <code>CANDIDATE_POOL_FACTOR</code>)  </li> <li>Applies MMR to get final top-N diversified results</li> </ul>"},{"location":"feed/#generate_mpad_feeduser_id-n","title":"<code>generate_mpad_feed(user_id, N)</code>","text":"<ul> <li>Loads user profile  </li> <li>Computes feed using reranking and MMR  </li> <li>Returns list of hook documents</li> </ul>"},{"location":"feed/#constants","title":"Constants","text":"<p>These are defined in <code>src.constants</code>:</p> <pre><code>INTERACTION_WEIGHTS = {\n    \"clicks\": 1.0,\n    \"likes\": 2.0,\n    \"saves\": 2.5,\n    \"shares\": 2.5,\n    \"duration\": 0.05,\n}\n\nDECAY_LAMBDA = 0.1\n\nWEIGHTS = {\n    \"base_score\": 0.5,\n    \"recency\": 0.2,\n    \"popularity\": 0.2,\n    \"exploration_bonus\": 0.1,\n}\n\nMMR_LAMBDA = 0.7\nN_VALUE = 2\nCANDIDATE_POOL_FACTOR = 3\n</code></pre>"},{"location":"frontend/","title":"HookED Frontend Documentation","text":""},{"location":"frontend/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Introduction </li> <li>Application Architecture </li> <li>Project Structure </li> <li>Core Features </li> <li>Navigation System </li> <li>State Management </li> <li>API Services </li> <li>Authentication </li> <li>UI Components </li> <li>Screens </li> <li>Installation and Setup </li> <li>Development Guidelines </li> <li>Testing </li> </ol>"},{"location":"frontend/#1-introduction","title":"1. Introduction","text":"<p>What is HookED?</p> <p>HookED is an educational mobile application designed to deliver engaging, bite-sized learning content called \"Hooks.\" These hooks aim to: - Spark curiosity - Deliver quick and interesting facts - Cover various educational topics</p> <p>Tip</p> <p>HookED uses gamification elements like streaks, XP, and badges to enhance user engagement.</p>"},{"location":"frontend/#2-application-architecture","title":"2. Application Architecture","text":"<pre><code>graph TD\n    A[React Native] --&gt; B[React Navigation]\n    A --&gt; C[Context API]\n    A --&gt; D[AsyncStorage]\n    A --&gt; E[TypeScript]\n    A --&gt; F[RESTful API]</code></pre> <ul> <li>Framework: React Native (TypeScript)</li> <li>Navigation: React Navigation (stack &amp; tab)</li> <li>State Management: Context API</li> <li>Persistence: AsyncStorage</li> <li>Backend: RESTful APIs</li> </ul>"},{"location":"frontend/#3-project-structure","title":"3. Project Structure","text":"<p>Note</p> <p>The project follows a modular structure. Add your actual folder breakdown here for more clarity.</p>"},{"location":"frontend/#4-core-features","title":"4. Core Features","text":""},{"location":"frontend/#41-content-discovery","title":"4.1 Content Discovery","text":"<ul> <li>Trending Hooks: Popular content</li> <li>Personalized Feed: Based on user interactions</li> <li>Search: Explore specific topics</li> <li>Topic Exploration: Pre-defined topic categories</li> </ul>"},{"location":"frontend/#42-user-engagement","title":"4.2 User Engagement","text":"<ul> <li>Daily Streak</li> <li>XP System</li> <li>Badges</li> <li>Quests</li> </ul>"},{"location":"frontend/#43-learning-experience","title":"4.3 Learning Experience","text":"<ul> <li>Hook Detail View</li> <li>Quizzes</li> <li>Rewards</li> </ul>"},{"location":"frontend/#5-navigation-system","title":"5. Navigation System","text":"<pre><code>graph TD\n    RN[RootNavigator] --&gt; SS[SplashScreen]\n    RN --&gt; AN[AuthNavigator]\n    RN --&gt; MN[MainNavigator]\n    AN --&gt; L[Login]\n    AN --&gt; S[SignUp]\n    AN --&gt; F[ForgotPassword]\n    AN --&gt; V[VerifyEmail]\n    MN --&gt; H[Home]\n    MN --&gt; HD[HookDetail]\n    MN --&gt; P[Profile]\n    MN --&gt; PR[Preferences]\n    MN --&gt; Q[Quiz/QuizResults]\n    MN --&gt; HG[HookGenerating]\n    MN --&gt; T[TrendingScreen]</code></pre>"},{"location":"frontend/#51-rootnavigator","title":"5.1 RootNavigator","text":"<ul> <li>Controls main flow based on authentication state</li> </ul>"},{"location":"frontend/#52-authnavigator","title":"5.2 AuthNavigator","text":"<ul> <li>Login, SignUp, ForgotPassword, VerifyEmail</li> </ul>"},{"location":"frontend/#53-mainnavigator","title":"5.3 MainNavigator","text":"<ul> <li>Home, HookDetail, Profile, Preferences, Quiz, HookGenerating, TrendingScreen</li> </ul>"},{"location":"frontend/#6-state-management","title":"6. State Management","text":""},{"location":"frontend/#61-authcontext","title":"6.1 AuthContext","text":"<ul> <li>Stores user info</li> <li>Manages login, logout, and registration</li> </ul>"},{"location":"frontend/#62-hookscontext","title":"6.2 HooksContext","text":"<ul> <li>Access and cache hook data</li> <li>Handle loading and refresh states</li> </ul>"},{"location":"frontend/#63-local-state","title":"6.3 Local State","text":"<ul> <li>Managed via <code>useState</code>, <code>useEffect</code></li> <li>Persistent storage with AsyncStorage</li> </ul>"},{"location":"frontend/#7-api-services","title":"7. API Services","text":""},{"location":"frontend/#71-apits","title":"7.1 <code>api.ts</code>","text":"<ul> <li><code>fetchHooks</code>, <code>fetchHookById</code></li> <li><code>searchHooks</code>, <code>fetchTrendingHooks</code></li> <li><code>fetchCuratedFeed</code></li> </ul>"},{"location":"frontend/#72-authservicets","title":"7.2 <code>AuthService.ts</code>","text":"<ul> <li><code>login</code>, <code>register</code>, <code>logout</code>, <code>forgotPassword</code></li> </ul>"},{"location":"frontend/#73-profileservicets","title":"7.3 <code>ProfileService.ts</code>","text":"<ul> <li><code>updateTags</code>, <code>getUserProfile</code></li> </ul>"},{"location":"frontend/#74-interactionservicets","title":"7.4 <code>InteractionService.ts</code>","text":"<ul> <li><code>logInteraction</code>, <code>logClick</code>, <code>logView</code></li> </ul>"},{"location":"frontend/#75-quizservicets","title":"7.5 <code>quizService.ts</code>","text":"<ul> <li><code>getQuestData</code>, <code>formatQuizQuestions</code></li> </ul>"},{"location":"frontend/#8-authentication","title":"8. Authentication","text":""},{"location":"frontend/#81-flow","title":"8.1 Flow","text":"<pre><code>sequenceDiagram\n    participant User\n    participant App\n    participant Backend\n\n    User-&gt;&gt;App: Enter Credentials\n    App-&gt;&gt;Backend: Request Token\n    Backend--&gt;&gt;App: Return Token\n    App-&gt;&gt;AsyncStorage: Save Token\n    App-&gt;&gt;User: Navigate to MainNavigator</code></pre> <ul> <li>Email/password login</li> <li>Token-based with AsyncStorage</li> <li>Auto-login on restart</li> </ul>"},{"location":"frontend/#82-user-data","title":"8.2 User Data","text":"<ul> <li>Synced on login</li> <li>XP/streak data handled server-side</li> </ul>"},{"location":"frontend/#9-ui-components","title":"9. UI Components","text":""},{"location":"frontend/#91-navigation","title":"9.1 Navigation","text":"<ul> <li>HamburgerMenu</li> <li>Logo</li> </ul>"},{"location":"frontend/#92-content","title":"9.2 Content","text":"<ul> <li>TrendingHooks</li> <li>HookCard</li> </ul>"},{"location":"frontend/#93-interactive","title":"9.3 Interactive","text":"<ul> <li>Search</li> <li>TabContainer</li> </ul>"},{"location":"frontend/#94-status","title":"9.4 Status","text":"<ul> <li>XP Display</li> <li>Streak Display</li> <li>Badge Display</li> </ul>"},{"location":"frontend/#10-screens","title":"10. Screens","text":""},{"location":"frontend/#101-homescreen","title":"10.1 HomeScreen","text":"<ul> <li>Search</li> <li>XP, streaks, badges</li> <li>Tabs: Trending vs Personalized</li> <li>Topic exploration</li> </ul>"},{"location":"frontend/#102-trendingscreen","title":"10.2 TrendingScreen","text":"<ul> <li>Swipeable feed</li> <li>XP rewards</li> <li>Confetti celebration</li> </ul>"},{"location":"frontend/#103-profilescreen","title":"10.3 ProfileScreen","text":"<ul> <li>Profile info</li> <li>Settings</li> <li>Achievements</li> </ul>"},{"location":"frontend/#104-quizscreen","title":"10.4 QuizScreen","text":"<ul> <li>Multiple choice</li> <li>Progress + XP</li> </ul>"},{"location":"frontend/#105-hookgeneratingscreen","title":"10.5 HookGeneratingScreen","text":"<ul> <li>Animated loading</li> <li>Smooth transition to hook</li> </ul>"},{"location":"frontend/#106-hookdetailscreen","title":"10.6 HookDetailScreen","text":"<ul> <li>Full content</li> <li>Related info</li> <li>Interactivity</li> </ul>"},{"location":"frontend/#11-installation-and-setup","title":"11. Installation and Setup","text":""},{"location":"frontend/#111-prerequisites","title":"11.1 Prerequisites","text":"<p>Warning</p> <p>Ensure all prerequisites are installed:</p> <ul> <li>Node.js (v14+)</li> <li>npm or yarn</li> <li>React Native CLI</li> <li>Xcode (iOS)</li> <li>Android Studio (Android)</li> </ul>"},{"location":"frontend/#112-environment-setup","title":"11.2 Environment Setup","text":"<p>Edit <code>env.ts</code>:</p> <pre><code>export const API_URL = 'https://your-api-endpoint.com';\n</code></pre>"},{"location":"frontend/#113-running-the-app","title":"11.3 Running the App","text":"<pre><code># Install dependencies\nyarn install\n# or\nnpm install\n\n# For iOS\ncd ios &amp;&amp; pod install &amp;&amp; cd ..\nyarn ios\n\n# For Android\nyarn android\n</code></pre>"},{"location":"frontend/#12-development-guidelines","title":"12. Development Guidelines","text":""},{"location":"frontend/#121-code-style","title":"12.1 Code Style","text":"<ul> <li>TypeScript best practices</li> <li>Functional components with hooks</li> <li>Alphabetized imports</li> <li>JSDoc for complex logic</li> </ul>"},{"location":"frontend/#122-state-management","title":"12.2 State Management","text":"<ul> <li>Use Context API for shared state</li> <li>Keep state local when appropriate</li> <li>Add loading indicators for async calls</li> </ul>"},{"location":"frontend/#123-uiux-principles","title":"12.3 UI/UX Principles","text":"<ul> <li>Adhere to <code>colors.ts</code></li> <li>Consistent padding/margin</li> <li>Responsive design</li> <li>Loading indicators for all fetches</li> </ul>"},{"location":"frontend/#13-testing","title":"13. Testing","text":""},{"location":"frontend/#131-unit-testing","title":"13.1 Unit Testing","text":"<ul> <li>Jest for services</li> <li>Mock APIs</li> </ul>"},{"location":"frontend/#132-component-testing","title":"13.2 Component Testing","text":"<ul> <li>Test rendering &amp; props behavior</li> </ul>"},{"location":"frontend/#133-e2e-testing","title":"13.3 E2E Testing","text":"<ul> <li>Detox for device testing</li> </ul>"},{"location":"routes/","title":"API Routes Overview","text":"<p>This documentation provides a clear, categorized guide to all available routes in the Hooked App API, built with FastAPI.</p> <p>Tip</p> <p>All authenticated routes expect a JWT token in the <code>Authorization</code> header as a Bearer token.</p>"},{"location":"routes/#authentication","title":"Authentication","text":""},{"location":"routes/#post-apiauthlogin","title":"<code>POST /api/auth/login</code>","text":"<p>Authenticate a user and receive a JWT.</p>"},{"location":"routes/#post-apiauthregister","title":"<code>POST /api/auth/register</code>","text":"<p>Register a new user.</p> <p>Example Request</p> <p><code>bash     curl -X POST https://yourapi.com/api/auth/login \\          -H \"Content-Type: application/json\" \\          -d '{\"email\": \"test@example.com\", \"password\": \"secure\"}'</code></p>"},{"location":"routes/#email-verification","title":"Email Verification","text":""},{"location":"routes/#get-apiauthverify-emailtoken","title":"<code>GET /api/auth/verify-email?token=...</code>","text":"<p>Verifies email with the provided token.</p> <p>Note</p> <p>Token is sent via email upon registration.</p>"},{"location":"routes/#profile-management","title":"Profile Management","text":""},{"location":"routes/#get-apiprofileprofile_id","title":"<code>GET /api/profile/{profile_id}</code>","text":"<p>Retrieve profile data.</p>"},{"location":"routes/#post-apiprofileprofile_id","title":"<code>POST /api/profile/{profile_id}</code>","text":"<p>Update username or password.</p>"},{"location":"routes/#put-apiprofiletagsprofile_id","title":"<code>PUT /api/profile/tags/{profile_id}</code>","text":"<p>Update user interest tags.</p>"},{"location":"routes/#delete-apiprofileprofile_id","title":"<code>DELETE /api/profile/{profile_id}</code>","text":"<p>Delete user profile.</p>"},{"location":"routes/#feed-system","title":"Feed System","text":"<p>This section powers the Hooked App's intelligent feed system.</p>"},{"location":"routes/#post-apifeedhook","title":"<code>POST /api/feed/hook</code>","text":"<p>Generates a hook using Perplexity AI.</p> <pre><code>flowchart TD\n    A[User Input] --&gt; B[POST /hook]\n    B --&gt; C[Query Perplexity]\n    C --&gt; D[Generate Hook]\n    D --&gt; E[Store + Return Hook]</code></pre>"},{"location":"routes/#get-apifeedcuratedprofile_id","title":"<code>GET /api/feed/curated/{profile_id}</code>","text":"<p>Returns a personalized feed using the MPAD algorithm.</p>"},{"location":"routes/#get-apifeedtrendingid","title":"<code>GET /api/feed/trending/{id}</code>","text":"<p>Returns trending hooks using a time-decay popularity model.</p>"},{"location":"routes/#get-apifeedsearchprofile_id","title":"<code>GET /api/feed/search/{profile_id}</code>","text":"<p>Generates a hook + quiz from a user's search query.</p> <p>Example Response</p> <p><code>json     {         \"hook\": \"How did Rome fall?\",         \"quiz\": {             \"question\": \"Which year marks the fall of the Western Roman Empire?\",             \"options\": [\"476 AD\", \"1066 AD\", \"1453 AD\", \"1776 AD\"]         }     }</code></p>"},{"location":"routes/#interaction-logging","title":"Interaction Logging","text":""},{"location":"routes/#post-apiinteractionlog","title":"<code>POST /api/interaction/log</code>","text":"<p>Logs hook interactions:</p> <ul> <li><code>click</code></li> <li><code>like</code></li> <li><code>save</code></li> <li><code>share</code></li> </ul>"},{"location":"routes/#post-apiinteractionpopularity","title":"<code>POST /api/interaction/popularity</code>","text":"<p>Updates time-decay popularity scores based on user interactions.</p> <p>Tip</p> <p>Used by the trending route to prioritize recent but highly engaged content.</p>"},{"location":"routes/#gamification-xp","title":"Gamification &amp; XP","text":""},{"location":"routes/#get-apiquestquizprofile_id","title":"<code>GET /api/quest/quiz/{profile_id}</code>","text":"<p>Generate N quizzes for the user.</p>"},{"location":"routes/#post-apiquestxpprofile_id","title":"<code>POST /api/quest/xp/{profile_id}</code>","text":"<p>Update XP based on user actions.</p> <pre><code>flowchart TD\n    A[User finishes a quiz] --&gt; B[XP submission]\n    B --&gt; C[POST /xp]\n    C --&gt; D[XP + Level updated in DB]</code></pre> <p>Note</p> <p>XP influences quest progress and possibly unlocks.</p>"},{"location":"routes/#summary","title":"Summary","text":"Category Route Prefix Tag Auth <code>/api/auth</code> <code>authentication</code> Verification <code>/api/auth</code> <code>email verification</code> Profile <code>/api/profile</code> <code>profile updates</code> Feed <code>/api/feed</code> <code>feed</code> Interaction <code>/api/interaction</code> <code>user interaction</code> Quests <code>/api/quest</code> <code>gamification</code>"},{"location":"routes/#authentication-flow-jwt","title":"Authentication Flow (JWT)","text":"<pre><code>sequenceDiagram\n    participant User\n    participant API\n    participant EmailService\n\n    User-&gt;&gt;API: POST /register\n    API--&gt;&gt;EmailService: Send verification email\n    User-&gt;&gt;EmailService: Click verification link\n    EmailService-&gt;&gt;API: GET /verify-email?token=...\n    API--&gt;&gt;User: Email verified!\n    User-&gt;&gt;API: POST /login\n    API--&gt;&gt;User: JWT token</code></pre>"},{"location":"trending/","title":"Trending Feed Scoring Module","text":"<p>This module implements a decayed popularity scoring algorithm for generating a trending hook feed. It combines engagement signals with a logarithmic time decay, enabling the system to surface recently engaging content while naturally downranking older items.</p> <p>Note: This scoring logic is distinct from MPAD's interest-based feed generation. It focuses purely on global popularity without personalization or diversification.</p>"},{"location":"trending/#overview","title":"Overview","text":"<p>The scoring formula weighs a hook\u2019s:</p> <ol> <li>Engagement Metrics (views, likes, saves, shares)</li> <li>Age (in days since creation)</li> </ol> <p>The final score is a decayed sum of weighted interactions, favoring content that is both popular and recent.</p>"},{"location":"trending/#scoring-formula","title":"Scoring Formula","text":""},{"location":"trending/#decayed_scorehook","title":"<code>decayed_score(hook)</code>","text":""},{"location":"trending/#formula","title":"Formula:","text":"<p>Where:</p> <ul> <li> <p></p> </li> <li> <p> : metric count on type i of hook h</p> </li> <li> <p> : weight of metric $i$ from <code>POPULARITY_WEIGHTS</code></p> </li> <li> <p> : age of the hook in days</p> </li> </ul>"},{"location":"trending/#popularity-weights","title":"Popularity Weights","text":"<pre><code>POPULARITY_WEIGHTS = {\n    \"viewCount\": 0.1,\n    \"likeCount\": 0.5,\n    \"saveCount\": 0.8,\n    \"shareCount\": 1.0,\n}\n</code></pre> <p>These weights reflect the relative value of different user actions:</p> <ul> <li>Views provide weak signal</li> <li>Likes and saves reflect growing intent</li> <li>Shares are the strongest indicator of viral interest</li> </ul>"},{"location":"trending/#time-decay","title":"Time Decay","text":"<p>The decay factor:</p> <p></p> <p>This ensures that content becomes less relevant as it ages, unless sustained by interaction spikes.</p>"},{"location":"trending/#integration-in-feed-pipeline","title":"Integration in Feed Pipeline","text":""},{"location":"trending/#update_popularity_scores","title":"<code>update_popularity_scores()</code>","text":"<ul> <li>Iterates over all hooks</li> <li>Computes their <code>decayed_score</code></li> <li>Stores the score in <code>hook.metadata.popularity</code></li> </ul>"},{"location":"trending/#get_trending_feedn","title":"<code>get_trending_feed(N)</code>","text":"<ul> <li>Queries all hooks</li> <li>Sorts by <code>metadata.popularity</code> (descending)</li> <li>Returns top <code>N</code> hooks</li> </ul>"},{"location":"trending/#output-format","title":"Output Format","text":"<p>Each result hook includes:</p> <pre><code>{\n  \"title\": \"How to build an LLM app\",\n  \"metadata\": {\n    \"viewCount\": 500,\n    \"likeCount\": 120,\n    \"saveCount\": 70,\n    \"shareCount\": 50,\n    \"popularity\": 93.12\n  }\n}\n</code></pre>"},{"location":"trending/#design-philosophy","title":"Design Philosophy","text":"<p>This scoring module is:</p> <ul> <li>Unpersonalized: Same for all users</li> <li>Lightweight: Easily computable with basic metrics</li> <li>Dynamic: Changes with new interactions over time</li> </ul>"}]}